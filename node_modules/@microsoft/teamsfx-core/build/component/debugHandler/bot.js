// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BotDebugHandler = void 0;
const tslib_1 = require("tslib");
const lodash_1 = require("lodash");
const path = tslib_1.__importStar(require("path"));
const util = tslib_1.__importStar(require("util"));
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const tools_1 = require("../../common/tools");
const utils_1 = require("../../common/utils");
const crypto_1 = require("../../core/crypto");
const environment_1 = require("../../core/environment");
const projectSettingsLoader_1 = require("../../core/middleware/projectSettingsLoader");
const aadRegistration_1 = require("../../plugins/resource/bot/aadRegistration");
const appStudio_1 = require("../../plugins/resource/bot/appStudio/appStudio");
const constants_1 = require("../../plugins/resource/bot/constants");
const strings_1 = require("../../plugins/resource/bot/resources/strings");
const common_1 = require("../../plugins/resource/bot/utils/common");
const resourceNameFactory_1 = require("../../plugins/resource/bot/utils/resourceNameFactory");
const constants_2 = require("../constants");
const error_1 = require("./error");
const localEnvProvider_1 = require("./localEnvProvider");
const botDebugMessages = {
    validatingArgs: "Validating the arguments ...",
    registeringAAD: "Registering an AAD app for bot ...",
    registeringBot: "Registering a bot in bot framework developer portal ...",
    updatingBotMessagingEndpoint: "Updating the bot messaging endpoint ...",
    savingStates: "Saving the states for bot ...",
    settingEnvs: "Setting the environment variables for bot ...",
    AADRegistered: "AAD app is registered",
    useExistingAAD: "Skip registering AAD app but use the existing AAD app from args",
    AADAlreadyRegistered: "Skip registering AAD app as it has already been registered before",
    botRegistered: "Bot is registered",
    botAlreadyRegistered: "Skip registering bot as it has already been registered before",
    botMessagingEndpointUpdated: "Bot messaging endpoint is updated to %s",
    statesSaved: "The states for bot are saved in %s",
    envsSet: "The environment variables for bot are set in %s",
};
class BotDebugHandler {
    constructor(projectPath, args, m365TokenProvider, logger, telemetry, ui) {
        this.existing = false;
        this.projectPath = projectPath;
        this.args = args;
        this.m365TokenProvider = m365TokenProvider;
        this.logger = logger;
        this.telemetry = telemetry;
        this.ui = ui;
    }
    getActions() {
        const actions = [];
        actions.push({
            startMessage: botDebugMessages.validatingArgs,
            run: this.validateArgs.bind(this),
        });
        actions.push({
            startMessage: botDebugMessages.registeringAAD,
            run: this.registerAAD.bind(this),
        });
        actions.push({
            startMessage: botDebugMessages.registeringBot,
            run: this.registerBot.bind(this),
        });
        actions.push({
            startMessage: botDebugMessages.updatingBotMessagingEndpoint,
            run: this.updateBotMessagingEndpoint.bind(this),
        });
        actions.push({
            startMessage: botDebugMessages.savingStates,
            run: this.saveStates.bind(this),
        });
        actions.push({
            startMessage: botDebugMessages.settingEnvs,
            run: this.setEnvs.bind(this),
        });
        return actions;
    }
    async validateArgs() {
        // TODO: allow botPassword to be set in other places (like env) instead of tasks.json
        if (this.args.botId && this.args.botPassword) {
            this.existing = true;
        }
        else if (this.args.botId || this.args.botPassword) {
            return teamsfx_api_1.err(error_1.InvalidExistingBotArgsError());
        }
        if (!this.args.botMessagingEndpoint || this.args.botMessagingEndpoint.trim().length === 0) {
            return teamsfx_api_1.err(error_1.BotMessagingEndpointMissingError());
        }
        this.args.botMessagingEndpoint = this.args.botMessagingEndpoint.trim();
        return teamsfx_api_1.ok([]);
    }
    async registerAAD() {
        try {
            const projectSettingsResult = await projectSettingsLoader_1.loadProjectSettingsByProjectPath(this.projectPath, true);
            if (projectSettingsResult.isErr()) {
                return teamsfx_api_1.err(projectSettingsResult.error);
            }
            this.projectSettingsV3 = projectSettingsResult.value;
            this.cryptoProvider = new crypto_1.LocalCrypto(this.projectSettingsV3.projectId);
            const envInfoResult = await environment_1.environmentManager.loadEnvInfo(this.projectPath, this.cryptoProvider, environment_1.environmentManager.getLocalEnvName(), true);
            if (envInfoResult.isErr()) {
                return teamsfx_api_1.err(envInfoResult.error);
            }
            this.envInfoV3 = envInfoResult.value;
            this.envInfoV3.state[constants_2.ComponentNames.TeamsBot] =
                this.envInfoV3.state[constants_2.ComponentNames.TeamsBot] || {};
            if (this.existing) {
                // use existing bot
                // set botId, botPassword from args to state
                this.envInfoV3.state[constants_2.ComponentNames.TeamsBot].botId = this.args.botId;
                this.envInfoV3.state[constants_2.ComponentNames.TeamsBot].botPassword = this.args.botPassword;
                return teamsfx_api_1.ok([botDebugMessages.useExistingAAD]);
            }
            else if (this.envInfoV3.state[constants_2.ComponentNames.TeamsBot].botId &&
                this.envInfoV3.state[constants_2.ComponentNames.TeamsBot].botPassword) {
                // AAD already registered
                return teamsfx_api_1.ok([botDebugMessages.AADAlreadyRegistered]);
            }
            else {
                // not using existing bot and AAD not yet registered
                const tokenResult = await this.m365TokenProvider.getAccessToken({
                    scopes: tools_1.GraphScopes,
                });
                if (tokenResult.isErr()) {
                    return teamsfx_api_1.err(tokenResult.error);
                }
                const displayName = resourceNameFactory_1.ResourceNameFactory.createCommonName(common_1.genUUID(), this.projectSettingsV3.appName, constants_1.MaxLengths.AAD_DISPLAY_NAME);
                const botAuthCredential = await aadRegistration_1.AADRegistration.registerAADAppAndGetSecretByGraph(tokenResult.value, displayName);
                // set objectId, botId, botPassword to state
                this.envInfoV3.state[constants_2.ComponentNames.TeamsBot].objectId = botAuthCredential.objectId;
                this.envInfoV3.state[constants_2.ComponentNames.TeamsBot].botId = botAuthCredential.clientId;
                this.envInfoV3.state[constants_2.ComponentNames.TeamsBot].botPassword = botAuthCredential.clientSecret;
                return teamsfx_api_1.ok([botDebugMessages.AADRegistered]);
            }
        }
        catch (error) {
            return teamsfx_api_1.err(teamsfx_api_1.assembleError(error, error_1.errorSource));
        }
    }
    async registerBot() {
        try {
            const tokenResult = await this.m365TokenProvider.getAccessToken({
                scopes: tools_1.AppStudioScopes,
            });
            if (tokenResult.isErr()) {
                return teamsfx_api_1.err(tokenResult.error);
            }
            const result = await appStudio_1.AppStudio.getBotRegistration(tokenResult.value, this.envInfoV3.state[constants_2.ComponentNames.TeamsBot].botId);
            if (result) {
                return teamsfx_api_1.ok([botDebugMessages.botAlreadyRegistered]);
            }
            const botReg = {
                botId: this.envInfoV3.state[constants_2.ComponentNames.TeamsBot].botId,
                name: utils_1.convertToAlphanumericOnly(this.projectSettingsV3.appName) +
                    strings_1.PluginLocalDebug.LOCAL_DEBUG_SUFFIX,
                description: "",
                iconUrl: "",
                messagingEndpoint: "",
                callingEndpoint: "",
            };
            await appStudio_1.AppStudio.createBotRegistration(tokenResult.value, botReg);
            return teamsfx_api_1.ok([botDebugMessages.botRegistered]);
        }
        catch (error) {
            return teamsfx_api_1.err(teamsfx_api_1.assembleError(error, error_1.errorSource));
        }
    }
    async updateBotMessagingEndpoint() {
        try {
            // set validDomain, domain, siteEndpoint from args to state
            const url = new URL(this.args.botMessagingEndpoint);
            this.envInfoV3.state[constants_2.ComponentNames.TeamsBot].validDomain = url.hostname;
            this.envInfoV3.state[constants_2.ComponentNames.TeamsBot].domain = url.hostname;
            this.envInfoV3.state[constants_2.ComponentNames.TeamsBot].siteEndpoint = url.origin;
            const tokenResult = await this.m365TokenProvider.getAccessToken({
                scopes: tools_1.AppStudioScopes,
            });
            if (tokenResult.isErr()) {
                return teamsfx_api_1.err(tokenResult.error);
            }
            await appStudio_1.AppStudio.updateMessageEndpoint(tokenResult.value, this.envInfoV3.state[constants_2.ComponentNames.TeamsBot].botId, this.args.botMessagingEndpoint);
            return teamsfx_api_1.ok([
                util.format(botDebugMessages.botMessagingEndpointUpdated, this.args.botMessagingEndpoint),
            ]);
        }
        catch (error) {
            return teamsfx_api_1.err(teamsfx_api_1.assembleError(error, error_1.errorSource));
        }
    }
    async saveStates() {
        try {
            const statePath = await environment_1.environmentManager.writeEnvState(lodash_1.cloneDeep(this.envInfoV3.state), this.projectPath, this.cryptoProvider, environment_1.environmentManager.getLocalEnvName(), true);
            if (statePath.isErr()) {
                return teamsfx_api_1.err(statePath.error);
            }
            return teamsfx_api_1.ok([util.format(botDebugMessages.statesSaved, path.normalize(statePath.value))]);
        }
        catch (error) {
            return teamsfx_api_1.err(teamsfx_api_1.assembleError(error, error_1.errorSource));
        }
    }
    async setEnvs() {
        try {
            const localEnvProvider = new localEnvProvider_1.LocalEnvProvider(this.projectPath);
            const botEnvs = await localEnvProvider.loadBotLocalEnvs();
            botEnvs.template[localEnvProvider_1.LocalEnvKeys.bot.template.BotId] =
                this.envInfoV3.state[constants_2.ComponentNames.TeamsBot].botId;
            botEnvs.template[localEnvProvider_1.LocalEnvKeys.bot.template.BotPassword] =
                this.envInfoV3.state[constants_2.ComponentNames.TeamsBot].botPassword;
            const envPath = await localEnvProvider.saveBotLocalEnvs(botEnvs);
            return teamsfx_api_1.ok([util.format(botDebugMessages.envsSet, path.normalize(envPath))]);
        }
        catch (error) {
            return teamsfx_api_1.err(teamsfx_api_1.assembleError(error, error_1.errorSource));
        }
    }
}
exports.BotDebugHandler = BotDebugHandler;
//# sourceMappingURL=bot.js.map