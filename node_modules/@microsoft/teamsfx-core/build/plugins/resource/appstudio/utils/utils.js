"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RetryHandler = exports.renderTemplate = exports.getLocalAppName = exports.getCustomizedKeys = void 0;
const tslib_1 = require("tslib");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const mustache_1 = tslib_1.__importDefault(require("mustache"));
const constants_1 = require("../constants");
function getCustomizedKeys(prefix, manifest) {
    let keys = [];
    for (const key in manifest) {
        if (manifest.hasOwnProperty(key)) {
            const value = manifest[key];
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.map((item, index) => {
                        keys = keys.concat(getCustomizedKeys(`${prefix}.${key}[${index}]`, item));
                    });
                }
                else {
                    keys = keys.concat(getCustomizedKeys(`${prefix}.${key}`, value));
                }
            }
            else if (typeof value === "string" && value.startsWith("{{config.manifest")) {
                keys.push(`${prefix}.${key}`);
            }
        }
    }
    return keys;
}
exports.getCustomizedKeys = getCustomizedKeys;
function getLocalAppName(appName) {
    const suffix = "-local-debug";
    if (suffix.length + appName.length <= constants_1.TEAMS_APP_SHORT_NAME_MAX_LENGTH) {
        appName = appName + suffix;
    }
    return appName;
}
exports.getLocalAppName = getLocalAppName;
function renderTemplate(manifestString, view) {
    // Unesacped HTML
    mustache_1.default.escape = (value) => value;
    manifestString = mustache_1.default.render(manifestString, view);
    return manifestString;
}
exports.renderTemplate = renderTemplate;
class RetryHandler {
    static async Retry(fn) {
        var _a, _b;
        let retries = this.RETRIES;
        let response;
        while (retries > 0) {
            retries = retries - 1;
            try {
                response = await fn();
                return response;
            }
            catch (e) {
                // Directly throw 404 error, keep trying for other status code e.g. 503 400
                if (retries <= 0 || ((_a = e.response) === null || _a === void 0 ? void 0 : _a.status) == 404 || ((_b = e.response) === null || _b === void 0 ? void 0 : _b.status) == 409) {
                    throw e;
                }
                else {
                    await new Promise((resolve) => setTimeout(resolve, 5000));
                }
            }
        }
    }
}
exports.RetryHandler = RetryHandler;
RetryHandler.RETRIES = 6;
//# sourceMappingURL=utils.js.map